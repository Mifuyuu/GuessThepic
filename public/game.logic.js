let gameData = {
    randomReveals: 3,
    isActive: false,
    timer: null,
    timeLeft: 30,
    startTime: null
};

let currentImage = null;
let clicks = 0;
let inGameScore = 100;
let userScore = 0;
let correctStreak = 0;
let mostStreak = 0;
let username = '';

const statusDiv = document.getElementById('status');
const gameGridDiv = document.getElementById('game-grid');
const choicesDiv = document.getElementById('choices');
const signoutBtn = document.getElementById('signout-btn');
const startBtn = document.getElementById('start');
const restartBtn = document.getElementById('restart');

startBtn.addEventListener('click', initGame);
restartBtn.addEventListener('click', initGame);

// viewScoreboardBtn.addEventListener('click', () => {
//     window.location.href = 'scoreboard.html';
// });

signoutBtn.addEventListener('click', () => {
    localStorage.removeItem('token');
    sessionStorage.removeItem('username');
    window.location.href = 'index.html';
});

window.addEventListener('load', () => {
    const token = localStorage.getItem('token');
    const sessionUser = sessionStorage.getItem('username');

    if (!token || !sessionUser) {
        console.log('Game page: Token or username missing on load. Redirecting.');
        window.location.href = 'index.html';
    } else {
        username = sessionUser;
        // initGame();
        startBtn.style.display = 'block';
    }
});
// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Event Listeners ---

// --- Core Game Logic ---
async function initGame() {
    console.log('Initializing game...');
    clicks = 0;
    // --- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏° ---
    inGameScore = 100; // Reset in-game score ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    // --- Reset ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ---
    gameData.randomReveals = 3;
    gameData.timeLeft = 30;
    gameData.isActive = true; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isActive ‡∏Å‡πà‡∏≠‡∏ô fetch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ timer ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á
    clearInterval(gameData.timer);

    startBtn.style.display = 'none';
    restartBtn.style.display = 'none';
    statusDiv.textContent = 'Loading game data...';

    try {
        // 1. Fetch Player Data (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á userScore)
        const playerDataFetched = await fetchPlayerData();
        if (!playerDataFetched) {
            console.error("Failed to fetch player data during init. Stopping game initialization.");
            statusDiv.textContent = 'Error loading player data. Please try logging in again.';
            return;
        }
        // Player data (userScore, correctStreak, mostStreak) is now loaded

        // 2. Fetch Game Images
        const response = await fetch('data.json');
        if (!response.ok) {
            throw new Error(`Failed to load data.json: ${response.statusText}`);
        }
        const images = await response.json();
        if (!images || images.length === 0) {
             throw new Error('No images found in data.json');
        }
        currentImage = images[Math.floor(Math.random() * images.length)];

        // 3. Render UI and Start Timer
        await renderGrid();
        renderChoices();
        renderRandomRevealButton();
        updateStatus(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡πÅ‡∏™‡∏î‡∏á inGameScore ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
        startTimer();   // <<< ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°
        gameData.startTime = Date.now();

    } catch (error) {
        console.error('Error during game initialization:', error);
        statusDiv.textContent = `Error loading game: ${error.message}. Please refresh.`;
        gameGridDiv.innerHTML = '';
        choicesDiv.innerHTML = '';
        // Ensure game is not active on error
        gameData.isActive = false;
        clearInterval(gameData.timer);
    }
}

async function fetchPlayerData() {
    const token = localStorage.getItem('token');
    if (!token || !username) {
        console.error("fetchPlayerData: Missing token or username.");
        return false;
    }

    console.log(`Fetching player data for: ${username}`);
    try {
        const response = await fetch(`/api/player/me`, {
            method: 'GET',
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.ok) {
            const data = await response.json();
            // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
            if (data && typeof data.score !== 'undefined' && typeof data.correctStreak !== 'undefined' && typeof data.mostStreak !== 'undefined') {
                userScore = data.score; // <<< ‡πÄ‡∏Å‡πá‡∏ö userScore ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å DB
                correctStreak = data.correctStreak;
                mostStreak = data.mostStreak;
                console.log('Player data fetched:', { userScore, correctStreak, mostStreak });
                return true;
            } else {
                 console.error('Invalid player data received:', data);
                 statusDiv.textContent = 'Error: Received invalid player data format.';
                 return false;
            }
        } else {
            if (response.status === 401 || response.status === 403) {
                console.error('Authentication failed (401/403). Redirecting...');
                localStorage.removeItem('token');
                sessionStorage.removeItem('username');
                window.location.href = 'index.html';
            } else {
                const errorText = await response.text();
                console.error(`Failed to fetch player data (${response.status}):`, errorText);
                statusDiv.textContent = `Error fetching data: ${response.statusText}. Try refreshing.`;
            }
            return false;
        }
    } catch (error) {
        console.error('Network or other error fetching player data:', error);
        statusDiv.textContent = 'Network error fetching player data. Please check connection.';
        return false;
    }
}

function updateStatus() {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (inGameScore)
    const bonusHint = (gameData.timeLeft >= 20 && gameData.isActive) ? 50 : 0;
    statusDiv.textContent =
        // `Player: ${username} | Current Total: ${userScore} | Round Score: ${inGameScore} | Time: ${gameData.timeLeft}s | Streak: ${correctStreak} | Max Streak: ${mostStreak}${bonusHint ? ' (+50 Bonus)' : ''}`;
        // ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏±‡πâ‡∏ô
         `Player: ${username} | Score: ${inGameScore} | Time: ${gameData.timeLeft}s | Streak: ${correctStreak} | Max Streak: ${mostStreak}${bonusHint ? ' (+50 Bonus)' : ''}`;
}


function handleAnswer(selectedIndex) {
    if (!gameData.isActive || typeof selectedIndex !== 'number' || isNaN(selectedIndex)) {
        return;
    }

    gameData.isActive = false;
    clearInterval(gameData.timer);

    const bonus = gameData.timeLeft >= 20 ? 50 : gameData.timeLeft >= 10 ? 25 : 0;
    // ‡πÉ‡∏ä‡πâ inGameScore ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö ‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    let currentRoundScore = inGameScore;
    let finalScore = userScore; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô finalScore ‡∏î‡πâ‡∏ß‡∏¢ userScore ‡πÄ‡∏î‡∏¥‡∏°
    let pointsChange = 0; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
    let message = '';

    if (selectedIndex === currentImage.correct) {
        correctStreak++;
        if (correctStreak > mostStreak) {
            mostStreak = correctStreak;
        }
        const scoreMultiplier = 1 + (0.1 * correctStreak);
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà *‡πÑ‡∏î‡πâ* ‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ (‡∏£‡∏ß‡∏° bonus ‡πÅ‡∏•‡∏∞ multiplier)
        let pointsEarned = Math.round((currentRoundScore + bonus) * scoreMultiplier);
        pointsChange = pointsEarned; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        finalScore = userScore + pointsChange; // ‡∏ô‡∏≥‡πÑ‡∏õ‡∏ö‡∏ß‡∏Å‡∏Å‡∏±‡∏ö userScore ‡πÄ‡∏î‡∏¥‡∏°

        message = `üéâ Correct! +${pointsChange} Points (New Total: ${finalScore}) | Streak: ${correctStreak} | Max Streak: ${mostStreak}`;
    } else {
        correctStreak = 0;
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Penalty ‡∏ó‡∏µ‡πà‡∏à‡∏∞ *‡∏´‡∏±‡∏Å* ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å userScore
        let penalty = 50; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏±‡∏Å
        pointsChange = -penalty; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ï‡∏¥‡∏î‡∏•‡∏ö)
        finalScore = Math.max(userScore + pointsChange, 0); // ‡∏ô‡∏≥‡πÑ‡∏õ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å userScore ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0)

        message = `‚ùå Wrong! -${penalty} Points. Correct: ${currentImage.choices[currentImage.correct]} (New Total: ${finalScore}) | Streak: 0 | Max Streak: ${mostStreak}`;
    }

    statusDiv.textContent = message; // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà)
    // --- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï userScore ‡πÉ‡∏ô client ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠ ---
    userScore = finalScore;
    // --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ---
    saveScoreToServer(finalScore, correctStreak, mostStreak);
    revealAllTiles();
    restartBtn.style.display = 'block';
}

async function saveScoreToServer(finalScoreToSave, currentCorrectStreak, currentMostStreak) { // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ parameter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const token = localStorage.getItem('token');
    console.log('Attempting to save score:', { finalScoreToSave, currentCorrectStreak, currentMostStreak });

    if (!token || !username) {
        console.error('Cannot save score: Missing token or username.');
        return;
    }

    try {
        // --- ‡∏™‡πà‡∏á finalScoreToSave ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà ---
        const response = await fetch(`/api/scores`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                score: finalScoreToSave, // ‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏´‡πâ server ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                correctStreak: currentCorrectStreak,
                mostStreak: currentMostStreak
            })
        });

        const responseData = await response.json();
        if (response.ok) {
            console.log('Score saved successfully:', responseData);
            // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï userScore ‡πÉ‡∏ô client ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ú‡∏∑‡πà‡∏≠ server ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤
            // userScore = responseData.newScore; // ‡∏´‡∏≤‡∏Å server ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        } else {
            console.error(`Failed to save score (${response.status}):`, responseData.message || response.statusText);
            statusDiv.textContent += ' (Warning: Could not save score)';
        }
    } catch (error) {
        console.error('Network error saving score:', error);
        statusDiv.textContent += ' (Warning: Network error saving score)';
    }
}

function startTimer() {
    clearInterval(gameData.timer);
    gameData.timer = setInterval(() => {
        if (gameData.timeLeft > 0 && gameData.isActive) {
            gameData.timeLeft--;
            // --- ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ---
            inGameScore = Math.max(inGameScore - 1, 0);
            updateStatus(); // ‡πÅ‡∏™‡∏î‡∏á inGameScore ‡∏ó‡∏µ‡πà‡∏•‡∏î‡∏•‡∏á
        } else if (gameData.isActive) {
            clearInterval(gameData.timer);
            handleTimeout();
        }
    }, 1000);
}

function handleTimeout() {
    if (!gameData.isActive) return;
    gameData.isActive = false;

    console.log("Time's up!");
    correctStreak = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï streak

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Penalty ‡∏ó‡∏µ‡πà‡∏à‡∏∞ *‡∏´‡∏±‡∏Å* ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å userScore ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    let timeOutPenalty = 100;
    let finalScore = Math.max(userScore - timeOutPenalty, 0); // ‡∏´‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å userScore ‡πÄ‡∏î‡∏¥‡∏°

    statusDiv.textContent = `‚è≥ Time's up! -${timeOutPenalty} Points (New Total: ${finalScore}) | Correct: ${currentImage.choices[currentImage.correct]} | Streak: 0 | Max Streak: ${mostStreak}`;

    // --- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï userScore ‡πÉ‡∏ô client ---
    userScore = finalScore;
    // --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ---
    saveScoreToServer(finalScore, correctStreak, mostStreak);
    revealAllTiles();
    restartBtn.style.display = 'block';
}

function revealAllTiles() {
    document.querySelectorAll('.tile-cover').forEach(cover => {
        if (cover) {
           cover.style.opacity = '0';
        }
    });
}

// --- renderGrid, renderChoices, renderRandomRevealButton ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
// --- ‡πÅ‡∏ï‡πà renderRandomRevealButton ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏•‡∏î inGameScore ---
async function renderGrid() { // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô async ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞ await getComputedStyle (‡πÅ‡∏ï‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á await)
    const grid = document.getElementById('game-grid');
    grid.innerHTML = ''; // Clear previous grid
    grid.style.backgroundImage = ''; // Ensure grid container itself has no background image

    if (!currentImage || !currentImage.path) {
        console.error("Cannot render grid: currentImage data is missing.");
        grid.textContent = "Error loading image data.";
        return;
    }

    // --- Get Computed Styles (‡∏ó‡∏≥‡∏ô‡∏≠‡∏Å loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û) ---
    let tileWidth = 100; // Default
    let tileHeight = 100; // Default
    let gap = 10; // Default
    let borderWidth = 2; // Default

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á tile ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤ (‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å grid ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ style ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    const tempTile = document.createElement('div');
    tempTile.className = 'tile'; // ‡πÉ‡∏´‡πâ‡∏°‡∏µ class ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô tile ‡∏à‡∏£‡∏¥‡∏á
    tempTile.style.visibility = 'hidden'; // ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
    grid.appendChild(tempTile); // ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DOM ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞ getComputedStyle ‡πÑ‡∏î‡πâ

    try {
        const tileStyle = window.getComputedStyle(tempTile);
        // parseFloat ‡∏à‡∏∞‡∏ï‡∏±‡∏î 'px' ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        tileWidth = parseFloat(tileStyle.width) || tileWidth;
        tileHeight = parseFloat(tileStyle.height) || tileHeight;
        borderWidth = parseFloat(tileStyle.borderLeftWidth) || borderWidth; // ‡πÄ‡∏≠‡∏≤ border ‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠

        const gridStyle = window.getComputedStyle(grid);
        gap = parseFloat(gridStyle.gap) || gap; // gap ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ 'row-gap column-gap'

        // Handle cases where gap might return two values
        const gapValues = gridStyle.gap.split(' ');
        gap = parseFloat(gapValues[0]) || gap; // Use the first value (row-gap usually) or fallback

    } catch (e) {
        console.warn("Could not compute styles, using default values.", e);
    } finally {
        grid.removeChild(tempTile); // ‡∏•‡∏ö tile ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏¥‡πâ‡∏á
    }

    // --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ---
    const numCols = 5; // ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å grid-template-columns ‡∏ñ‡πâ‡∏≤‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
    const numRows = 5;
    // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö box-sizing ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô border-box ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì borderWidth ‡∏à‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏õ
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô content-box (default):
    const actualTileWidth = tileWidth + 2 * borderWidth;
    const actualTileHeight = tileHeight + 2 * borderWidth;
    const horizontalStep = actualTileWidth + gap;
    const verticalStep = actualTileHeight + gap;

    // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Background Image ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
    const totalBgWidth = (numCols * actualTileWidth) + ((numCols - 1) * gap);
    const totalBgHeight = (numRows * actualTileHeight) + ((numRows - 1) * gap);
    const backgroundSize = `${totalBgWidth}px ${totalBgHeight}px`;

    console.log(`Computed Grid Params: Tile(${tileWidth}x${tileHeight}), Border(${borderWidth}), Gap(${gap})`);
    console.log(`Steps: H=${horizontalStep}, V=${verticalStep}. BG Size: ${backgroundSize}`);


    // --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Tiles ---
    for (let i = 0; i < numCols * numRows; i++) {
        const tile = document.createElement('div');
        tile.className = 'tile';

        const imgDiv = document.createElement('div');
        imgDiv.className = 'tile-img';
        imgDiv.style.backgroundImage = `url('${currentImage.path}')`;
        imgDiv.style.backgroundSize = backgroundSize; // *** ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ ***

        const row = Math.floor(i / numCols);
        const col = i % numCols;

        // *** ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Background Position ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ***
        const backgroundPosX = -col * horizontalStep;
        const backgroundPosY = -row * verticalStep;
        imgDiv.style.backgroundPosition = `${backgroundPosX}px ${backgroundPosY}px`;

        const cover = document.createElement('div');
        cover.className = 'tile-cover';
        cover.addEventListener('click', () => handleTileClick(cover)); // <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ handleTileClick

        tile.appendChild(imgDiv);
        tile.appendChild(cover);
        grid.appendChild(tile);
    }
}
// --- ‡πÄ‡∏û‡∏¥‡πà‡∏° handleTileClick ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ---
function handleTileClick(coverElement) {
    if (!gameData.isActive || coverElement.style.opacity === '0') {
        return; // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà active ‡∏´‡∏£‡∏∑‡∏≠ tile ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    }
    coverElement.style.opacity = '0';
    clicks++;
    // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    // inGameScore = Math.max(inGameScore - 1, 0);
    updateStatus(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å (‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏î)
}
// --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° handleTileClick ---


function renderChoices() {
    choicesDiv.innerHTML = ''; // Clear previous choices

    const select = document.createElement('select');
    select.className = 'choice-dropdown';
    select.id = 'answer-select'; // Add ID for easier selection

    const defaultOption = document.createElement('option');
    defaultOption.textContent = "Select your answer...";
    defaultOption.value = ""; // Use empty string for default/unselected
    defaultOption.disabled = true; // Make it unselectable initially
    defaultOption.selected = true;
    select.appendChild(defaultOption);

    // Shuffle choices (optional but good practice)
    const shuffledChoices = [...currentImage.choices];
    // Basic shuffle:
    for (let i = shuffledChoices.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffledChoices[i], shuffledChoices[j]] = [shuffledChoices[j], shuffledChoices[i]];
    }


    shuffledChoices.forEach((choiceText) => {
        const originalIndex = currentImage.choices.indexOf(choiceText); // Find original index for correct answer check
        const option = document.createElement('option');
        option.textContent = choiceText;
        option.value = originalIndex; // Use original index as value
        select.appendChild(option);
    });

    select.addEventListener('change', (event) => {
        // Parse the selected value (which is the original index)
        const selectedOriginalIndex = parseInt(event.target.value, 10);
        handleAnswer(selectedOriginalIndex);
    });
    choicesDiv.appendChild(select);
}

function renderRandomRevealButton() {
    let revealBtn = choicesDiv.querySelector('#random-reveal-btn');
    if (!revealBtn) {
        revealBtn = document.createElement('button');
        revealBtn.id = 'random-reveal-btn';
        revealBtn.className = 'choice-btn';
        choicesDiv.appendChild(revealBtn);
    }

    revealBtn.textContent = `Random Reveal (${gameData.randomReveals})`;
    revealBtn.replaceWith(revealBtn.cloneNode(true));
    revealBtn = choicesDiv.querySelector('#random-reveal-btn');
    revealBtn.addEventListener('click', handleRandomReveal);
    revealBtn.disabled = (gameData.randomReveals <= 0 || !gameData.isActive);
}


function handleRandomReveal() {
    if (gameData.randomReveals <= 0 || !gameData.isActive) return;

    const covers = document.querySelectorAll('.tile-cover');
    const hiddenTiles = Array.from(covers).filter(cover => cover && cover.style.opacity !== '0');

    if (hiddenTiles.length > 0) {
        const randomIndex = Math.floor(Math.random() * hiddenTiles.length);
        const randomTile = hiddenTiles[randomIndex];
        randomTile.style.opacity = '0';

        gameData.randomReveals--;
        clicks++;
        // --- ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ---
        inGameScore = Math.max(inGameScore - 10, 0); // Penalty for using reveal

       renderRandomRevealButton();
       updateStatus(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï inGameScore ‡∏ó‡∏µ‡πà‡∏•‡∏î‡∏•‡∏á
    } else {
         console.log("No more tiles to reveal.");
         const revealBtn = choicesDiv.querySelector('#random-reveal-btn');
         if(revealBtn) revealBtn.disabled = true;
    }
}
// --- End Core Game Logic ---